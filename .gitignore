#include<iostream>
using namespace std;
// Declaring doublly node
struct node {
    struct node *lchild;
    int data;
    struct  node *rchild;
};
//
struct  node *root=0;
void insert(int key){
     struct node *t=root;
     struct node *r=0, *p;
     if(root==0){
         p=new node;
         p->data=key;
         p->lchild=p->rchild=0;
         root=p;
         return ;
     }
     while(t!=0){
         r=t;
         if(key<t->data){
             t=t->lchild;}
             else if(key>t->data){
                 t=t->rchild;
             }
             else{
                 return ;
             }
         }
         p=new node;
         p->data=key;
         p->lchild=p->rchild=0;
         if(key<r->data){
             r->lchild=p;
         }
         else{
             r->rchild=p; 
         }
     }
void inorder(struct node *p){
         if(p!=0){
             inorder(p->lchild);
            cout<<p->data<<" "; 
            inorder(p->rchild);
         }
     }
struct node *search(int key){
    struct node *t=root;
    while(t){
        if(key==t->data){
            return t;
        }
        else if(key<t->data){
            t=t->lchild;
        }
        else{
            t=t->rchild;
        }
    }
    return 0;
}
 
int main(){
    struct node *temp;
    insert(10);
    insert(5);
    insert(20);
    insert(8);
    insert(30);
    inorder(root);
    cout<<endl;
    temp=search(2);
    if(temp){
        cout<<"Element is found: "<<temp->data<<endl;
    }else{
        cout<<"Not found: "<<endl;
    }
    return 0;
}
